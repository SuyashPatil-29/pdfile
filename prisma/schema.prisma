generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  sessions      Session[]

  generations Generation[]
  unlimited   Boolean @default(false)

  tutors       Tutor[]
  messages     Message[]
  
  codeGenerators CodeGenerator[]
  codeGeneratorMessages CodeGeneratorMessage[]
}

model Generation {
  id             String   @id @default(cuid())
  type           String
  date           DateTime @default(now())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeGenerator  CodeGenerator @relation(fields: [codeGeneratorId], references: [id])
  codeGeneratorId String
}

model Tutor {
  id          String    @id @default(cuid())
  title       String
  description String
  source      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())
  messages    Message[]
}

model Message {
  id      String @id @default(cuid())
  role    String
  content String

  tutor   Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model CodeGenerator {
  id          String    @id @default(cuid())
  title       String
  description String
  sourceCode  String
  userId      String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  generations Generation[]
  messages    CodeGeneratorMessage[]
}

model CodeGeneratorMessage {
  id             String @id @default(cuid())
  role           String
  content        String
  codeGenerator  CodeGenerator @relation(fields: [codeGeneratorId], references: [id])
  codeGeneratorId String
  userId         String
  user           User @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
}
